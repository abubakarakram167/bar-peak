{"ast":null,"code":"var _this = this;\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport moment from 'moment';\nvar weekDays = {\n  0: \"sunday\",\n  1: \"monday\",\n  2: \"tuesday\",\n  3: \"wednesday\",\n  4: \"thursday\",\n  5: \"friday\",\n  6: \"saturday\"\n};\nexport var getSelectedCategories = function getSelectedCategories(barOrNightClub) {\n  var category = _this.props.category.category.category;\n  var selectedCategory;\n\n  if (barOrNightClub === \"nightClub\") {\n    selectedCategory = category.filter(function (category) {\n      return category.title === 'Night Clubs';\n    });\n  } else {\n    var barCategories = _this.state.question3;\n    selectedCategory = category.filter(function (category) {\n      return barCategories.includes(category._id);\n    });\n  }\n\n  return selectedCategory.map(function (category) {\n    return category._id;\n  });\n};\nexport var getAllCaseData = function getAllCaseData(userVibeData, data, selectedCategory, settings) {\n  var filterVibeCategoryData = {\n    goodSpots: [],\n    averageSpots: [],\n    badSpots: [],\n    settings: {}\n  };\n  filterVibeCategoryData.settings = settings;\n  var vibeCategory = userVibeData.vibeCategory;\n\n  if (vibeCategory === \"Professional Party Time\") {\n    data.map(function (business) {\n      if (business.category.length !== 0 && business.category.some(function (category) {\n        return selectedCategory.includes(category._id);\n      })) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated.difficultyGettingIn,\n            fun = _defaultOrAccumulated.fun,\n            crowd = _defaultOrAccumulated.crowd;\n        if (crowd >= 4 && crowd <= 5 && difficultyGettingIn >= 4 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn <= 2 && fun <= 2) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Moderate Party Time\") {\n    data.map(function (business) {\n      if (business.category.length !== 0 && business.category.some(function (category) {\n        return selectedCategory.includes(category._id);\n      })) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated2 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated2.difficultyGettingIn,\n            fun = _defaultOrAccumulated2.fun,\n            crowd = _defaultOrAccumulated2.crowd;\n        if (crowd >= 4 && crowd <= 5 && difficultyGettingIn >= 3 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn <= 2 && fun <= 2) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Social Drinking\") {\n    data.map(function (business) {\n      if (business.category.length !== 0 && business.category.some(function (category) {\n        return selectedCategory.includes(category._id);\n      })) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated3 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated3.difficultyGettingIn,\n            fun = _defaultOrAccumulated3.fun,\n            crowd = _defaultOrAccumulated3.crowd;\n        if (crowd >= 3 && crowd <= 4 && difficultyGettingIn <= 2 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn >= 4 && fun < 3) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Baby Party Time\") {\n    data.map(function (business) {\n      if (business.category.length !== 0 && business.category.some(function (category) {\n        return selectedCategory.includes(category._id);\n      })) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated4 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated4.difficultyGettingIn,\n            crowd = _defaultOrAccumulated4.crowd;\n        if (crowd <= 2 && difficultyGettingIn <= 2) filterVibeCategoryData.goodSpots.push(business);else if (crowd >= 3 && difficultyGettingIn >= 3) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else {\n    data.map(function (business) {\n      if (business.category.length !== 0 && business.category.some(function (category) {\n        return selectedCategory.includes(category._id);\n      })) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated5 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated5.difficultyGettingIn,\n            crowd = _defaultOrAccumulated5.crowd;\n        if (crowd <= 1 && difficultyGettingIn <= 1) filterVibeCategoryData.goodSpots.push(business);else if (crowd >= 3 && difficultyGettingIn >= 4) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  }\n};\nexport var getSearchData = function getSearchData(userVibeData, searchData, settings) {\n  var filterVibeCategoryData = {\n    goodSpots: [],\n    averageSpots: [],\n    badSpots: [],\n    settings: {}\n  };\n  var vibeCategory = userVibeData.vibeCategory;\n  filterVibeCategoryData.settings = settings;\n\n  if (vibeCategory === \"Professional Party Time\") {\n    searchData.map(function (business) {\n      if (business.category.length !== 0) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated6 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated6.difficultyGettingIn,\n            fun = _defaultOrAccumulated6.fun,\n            crowd = _defaultOrAccumulated6.crowd;\n        if (crowd >= 4 && crowd <= 5 && difficultyGettingIn >= 4 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn <= 2 && fun <= 2) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Moderate Party Time\") {\n    searchData.map(function (business) {\n      if (business.category.length !== 0) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated7 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated7.difficultyGettingIn,\n            fun = _defaultOrAccumulated7.fun,\n            crowd = _defaultOrAccumulated7.crowd;\n        if (crowd >= 4 && crowd <= 5 && difficultyGettingIn >= 3 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn <= 2 && fun <= 2) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Social Drinking\") {\n    searchData.map(function (business) {\n      if (business.category.length !== 0) {\n        var rating = business.rating;\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated8 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated8.difficultyGettingIn,\n            fun = _defaultOrAccumulated8.fun,\n            crowd = _defaultOrAccumulated8.crowd;\n        if (crowd >= 3 && crowd <= 4 && difficultyGettingIn <= 2 && fun >= 3) filterVibeCategoryData.goodSpots.push(business);else if (crowd <= 2 && difficultyGettingIn >= 4 && fun < 3) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else if (vibeCategory === \"Baby Party Time\") {\n    searchData.map(function (business) {\n      if (business.category.length !== 0) {\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated9 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated9.difficultyGettingIn,\n            fun = _defaultOrAccumulated9.fun,\n            crowd = _defaultOrAccumulated9.crowd;\n        if (crowd <= 2 && difficultyGettingIn <= 2) filterVibeCategoryData.goodSpots.push(business);else if (crowd >= 3 && difficultyGettingIn >= 3) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  } else {\n    searchData.map(function (business) {\n      if (business.category.length !== 0) {\n        var defaultOrAccumulatedRating;\n        var getDefaultSettings = changeToDefaultEstablishment(business, settings);\n        defaultOrAccumulatedRating = getDefaultSettings.defaultOrAccumulatedRating;\n        var _defaultOrAccumulated10 = defaultOrAccumulatedRating,\n            difficultyGettingIn = _defaultOrAccumulated10.difficultyGettingIn,\n            fun = _defaultOrAccumulated10.fun,\n            crowd = _defaultOrAccumulated10.crowd;\n        if (crowd <= 1 && difficultyGettingIn <= 1) filterVibeCategoryData.goodSpots.push(business);else if (crowd >= 3 && difficultyGettingIn >= 4) filterVibeCategoryData.badSpots.push(business);else filterVibeCategoryData.averageSpots.push(business);\n      }\n    });\n    return getMapData(filterVibeCategoryData);\n  }\n};\n\nvar getMapData = function getMapData(filterCategoryBusinessVibe) {\n  var goodSpots = filterCategoryBusinessVibe.goodSpots,\n      badSpots = filterCategoryBusinessVibe.badSpots,\n      averageSpots = filterCategoryBusinessVibe.averageSpots,\n      settings = filterCategoryBusinessVibe.settings;\n  var goodSpotMarkers = getSpotMapData(goodSpots, settings);\n  var badSpotMarkers = getSpotMapData(badSpots, settings);\n  var averageSpotMarkers = getSpotMapData(averageSpots, settings);\n  var filterBusinessData = {\n    goodSpots: goodSpotMarkers,\n    badSpots: badSpotMarkers,\n    averageSpots: averageSpotMarkers,\n    allSpots: goodSpotMarkers.concat(averageSpotMarkers, badSpotMarkers)\n  };\n  return filterBusinessData;\n};\n\nvar getKeyByValue = function getKeyByValue(object, value) {\n  return Object.keys(object).find(function (key) {\n    return object[key] === value;\n  });\n};\n\nvar getEstablishmentOpeningHours = function getEstablishmentOpeningHours(marker) {\n  var openingHours = marker.googleBusiness.opening_hours;\n  var defaultTime = false;\n  var restaurantOpen = true;\n  var todayDate = moment().format('dddd YYYY-MM-DD HH:mm').split(' ');\n  var todayDayName = todayDate[0].toLowerCase();\n  var myCurrentTime = parseInt(todayDate[2].toString().replaceAll(':', ''));\n  var specifcDayTimings = openingHours ? openingHours.periods.filter(function (day) {\n    if (day.open.day === getKeyByValue(weekDays, todayDayName)) return true;\n  }) : null;\n  var originalTimeOrDefaultTime;\n  if (specifcDayTimings && specifcDayTimings.length > 0) originalTimeOrDefaultTime = specifcDayTimings[0];else {\n    defaultTime = true;\n    originalTimeOrDefaultTime = {\n      close: {\n        day: parseInt(getKeyByValue(weekDays, todayDayName) + 1).toString(),\n        time: \"0200\"\n      },\n      open: {\n        day: getKeyByValue(weekDays, todayDayName).toString(),\n        time: \"1100\"\n      }\n    };\n  }\n  var openTime = parseInt(originalTimeOrDefaultTime.open.time);\n  var closeTime = parseInt(originalTimeOrDefaultTime.close.time);\n  var openDay = parseInt(originalTimeOrDefaultTime.open.day);\n  var closeDay = parseInt(originalTimeOrDefaultTime.close.day);\n  var myCurrentDay = parseInt(getKeyByValue(weekDays, todayDayName));\n\n  if (myCurrentDay === closeDay) {\n    if (myCurrentTime > openTime && myCurrentTime < closeTime) restaurantOpen = true;else restaurantOpen = false;\n  } else {\n    if (myCurrentTime <= closeTime) restaurantOpen = true;else restaurantOpen = false;\n  }\n\n  return {\n    restaurantOpen: restaurantOpen,\n    openingTime: restaurantOpen ? openTime : null\n  };\n};\n\nvar changeToDefaultEstablishment = function changeToDefaultEstablishment(marker, settings) {\n  console.log(\"the settings\", settings);\n  var getOpeningHours = getEstablishmentOpeningHours(marker);\n  var allRating = marker.allRating,\n      rating = marker.rating;\n  var finalBusinessRating = {\n    isClosed: false,\n    isDefault: true,\n    defaultOrAccumulatedRating: {}\n  };\n  var creationAt = marker.rating.creationAt;\n\n  if (creationAt && moment(creationAt).format('YYYY-MM-DD') === moment().format('YYYY-MM-DD')) {\n    if (!getOpeningHours.restaurantOpen) {\n      finalBusinessRating.isClosed = true;\n      finalBusinessRating.defaultOrAccumulatedRating = rating;\n    } else {\n      var openingTime = getOpeningHours.openingTime.toString();\n      var completeOpeningTime;\n\n      if (openingTime.length === 3) {\n        completeOpeningTime = openingTime.split('');\n        completeOpeningTime.unshift(0);\n        completeOpeningTime.splice(2, 0, ':');\n      } else {\n        completeOpeningTime = openingTime.split('');\n        completeOpeningTime.splice(2, 0, ':');\n      }\n\n      var restaurantOpenTime = moment().format(\"YYYY-MM-DD\") + \" \" + completeOpeningTime.toString().split(',').join(\"\");\n      var establishmentRating = allRating.map(function (rating) {\n        return {\n          creationAt: rating.creationAt\n        };\n      });\n      var totalCounts = establishmentRating.filter(function (rating) {\n        if (moment(rating.creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime && moment(rating.creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > moment(creationAt).format(\"YYYY-MM-DD HH:mm\").toString()) return true;\n      }).length;\n      console.log(\"the total counts\", totalCounts);\n      var isDefault = totalCounts <= settings.noOfUsersUntilShowDefault ? true : false;\n      var accumulatedAverageRatingPerDay = {\n        fun: 0,\n        crowd: 0,\n        genderBreakdown: 0,\n        difficultyGettingIn: 0,\n        difficultyGettingDrink: 0,\n        totalRatings: 0\n      };\n      var defaultOrAccumulatedRating = {};\n\n      if (isDefault) {\n        finalBusinessRating.isClosed = false;\n        finalBusinessRating.defaultOrAccumulatedRating = marker.rating;\n        finalBusinessRating.isDefault = true;\n      } else {\n        var _establishmentRating = allRating.map(function (rating) {\n          return {\n            ratingTime: rating.creationAt,\n            fun: rating.fun,\n            crowd: rating.crowd,\n            genderBreakdown: rating.ratioInput,\n            difficultyGettingIn: rating.difficultyGettingIn,\n            difficultyGettingDrink: rating.difficultyGettingDrink\n          };\n        });\n\n        var totalEstablishments = _establishmentRating.filter(function (rating) {\n          if (moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime && moment(creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString()) return true;\n        });\n\n        var totalEstablishmentsCount = totalEstablishments.length;\n\n        for (var _iterator = _createForOfIteratorHelperLoose(totalEstablishments), _step; !(_step = _iterator()).done;) {\n          var _rating = _step.value;\n          accumulatedAverageRatingPerDay.fun = _rating.fun + accumulatedAverageRatingPerDay.fun;\n          accumulatedAverageRatingPerDay.difficultyGettingIn = _rating.difficultyGettingIn + accumulatedAverageRatingPerDay.difficultyGettingIn;\n          accumulatedAverageRatingPerDay.difficultyGettingDrink = _rating.difficultyGettingDrink + accumulatedAverageRatingPerDay.difficultyGettingDrink;\n          accumulatedAverageRatingPerDay.genderBreakdown = _rating.genderBreakdown + accumulatedAverageRatingPerDay.genderBreakdown;\n          accumulatedAverageRatingPerDay.crowd = _rating.crowd + accumulatedAverageRatingPerDay.crowd;\n        }\n\n        accumulatedAverageRatingPerDay.fun = (accumulatedAverageRatingPerDay.fun / totalEstablishmentsCount).toFixed(1), accumulatedAverageRatingPerDay.difficultyGettingIn = (accumulatedAverageRatingPerDay.difficultyGettingIn / totalEstablishmentsCount).toFixed(1), accumulatedAverageRatingPerDay.difficultyGettingDrink = (accumulatedAverageRatingPerDay.difficultyGettingDrink / totalEstablishmentsCount).toFixed(1), accumulatedAverageRatingPerDay.genderBreakdown = (accumulatedAverageRatingPerDay.genderBreakdown / totalEstablishmentsCount).toFixed(1), accumulatedAverageRatingPerDay.crowd = (accumulatedAverageRatingPerDay.crowd / totalEstablishmentsCount).toFixed(1);\n        defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n        finalBusinessRating.isClosed = false;\n        finalBusinessRating.defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n        finalBusinessRating.isDefault = false;\n      }\n    }\n  } else {\n    if (allRating.length > 0) {\n      if (!getOpeningHours.restaurantOpen) {\n        finalBusinessRating.isClosed = true;\n      } else {\n        var _openingTime = getOpeningHours.openingTime.toString();\n\n        var _completeOpeningTime;\n\n        if (_openingTime.length === 3) {\n          _completeOpeningTime = _openingTime.split('');\n\n          _completeOpeningTime.unshift(0);\n\n          _completeOpeningTime.splice(2, 0, ':');\n        } else {\n          _completeOpeningTime = _openingTime.split('');\n\n          _completeOpeningTime.splice(2, 0, ':');\n        }\n\n        var _restaurantOpenTime = moment().format(\"YYYY-MM-DD\") + \" \" + _completeOpeningTime.toString().split(',').join(\"\");\n\n        var _establishmentRating2 = allRating.map(function (rating) {\n          return {\n            ratingTime: rating.creationAt,\n            fun: rating.fun,\n            crowd: rating.crowd,\n            genderBreakdown: rating.ratioInput,\n            difficultyGettingIn: rating.difficultyGettingIn,\n            difficultyGettingDrink: rating.difficultyGettingDrink\n          };\n        });\n\n        console.log(\"the restaurant open\", _restaurantOpenTime);\n        console.log(\"the establishment rating\", _establishmentRating2);\n\n        var _totalCounts = _establishmentRating2.filter(function (ratingTime) {\n          if (moment(ratingTime.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > _restaurantOpenTime) return true;\n        }).length;\n\n        console.log(\"the total counts......\", _totalCounts);\n\n        var _isDefault = _totalCounts <= settings.noOfUsersUntilShowDefault ? true : false;\n\n        var _accumulatedAverageRatingPerDay = {\n          fun: 0,\n          crowd: 0,\n          genderBreakdown: 0,\n          difficultyGettingIn: 0,\n          difficultyGettingDrink: 0,\n          totalRatings: 0\n        };\n        var _defaultOrAccumulatedRating = {};\n\n        if (_isDefault) {\n          finalBusinessRating.isClosed = false;\n          finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n          finalBusinessRating.isDefault = true;\n        } else if (settings.isCurrentDefault) {\n          var _totalEstablishments = _establishmentRating2.filter(function (rating) {\n            if (moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > _restaurantOpenTime && moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > moment(settings.ratingChangeTime).format(\"YYYY-MM-DD HH:mm\").toString()) return true;\n          });\n\n          console.log(\"after adminn set itss\", _totalEstablishments);\n          console.log(\"the totallll blinkers after set\", _totalEstablishments.length);\n          var totalEstablishmentsCount = _totalEstablishments.length;\n\n          var _isDefault2 = _totalEstablishments.length <= settings.noOfUsersUntilShowDefault ? true : false;\n\n          var _accumulatedAverageRatingPerDay2 = {\n            fun: 0,\n            crowd: 0,\n            genderBreakdown: 0,\n            difficultyGettingIn: 0,\n            difficultyGettingDrink: 0,\n            totalRatings: 0\n          };\n          var _defaultOrAccumulatedRating2 = {};\n\n          if (_isDefault2) {\n            finalBusinessRating.isClosed = false;\n            finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n            finalBusinessRating.isDefault = true;\n          } else {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_totalEstablishments), _step2; !(_step2 = _iterator2()).done;) {\n              var _rating2 = _step2.value;\n              _accumulatedAverageRatingPerDay2.fun = _rating2.fun + _accumulatedAverageRatingPerDay2.fun;\n              _accumulatedAverageRatingPerDay2.difficultyGettingIn = _rating2.difficultyGettingIn + _accumulatedAverageRatingPerDay2.difficultyGettingIn;\n              _accumulatedAverageRatingPerDay2.difficultyGettingDrink = _rating2.difficultyGettingDrink + _accumulatedAverageRatingPerDay2.difficultyGettingDrink;\n              _accumulatedAverageRatingPerDay2.genderBreakdown = _rating2.genderBreakdown + _accumulatedAverageRatingPerDay2.genderBreakdown;\n              _accumulatedAverageRatingPerDay2.crowd = _rating2.crowd + _accumulatedAverageRatingPerDay2.crowd;\n            }\n\n            _accumulatedAverageRatingPerDay2.fun = (_accumulatedAverageRatingPerDay2.fun / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay2.difficultyGettingIn = (_accumulatedAverageRatingPerDay2.difficultyGettingIn / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay2.difficultyGettingDrink = (_accumulatedAverageRatingPerDay2.difficultyGettingDrink / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay2.genderBreakdown = (_accumulatedAverageRatingPerDay2.genderBreakdown / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay2.crowd = (_accumulatedAverageRatingPerDay2.crowd / totalEstablishmentsCount).toFixed(1);\n            finalBusinessRating.isClosed = false;\n            finalBusinessRating.defaultOrAccumulatedRating = _accumulatedAverageRatingPerDay2;\n            finalBusinessRating.isDefault = false;\n          }\n        } else {\n          var _establishmentRating3 = allRating.map(function (rating) {\n            return {\n              ratingTime: rating.creationAt,\n              fun: rating.fun,\n              crowd: rating.crowd,\n              genderBreakdown: rating.ratioInput,\n              difficultyGettingIn: rating.difficultyGettingIn,\n              difficultyGettingDrink: rating.difficultyGettingDrink\n            };\n          });\n\n          var _totalEstablishments2 = _establishmentRating3.filter(function (rating) {\n            if (moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > _restaurantOpenTime) return true;\n          });\n\n          var totalEstablishmentsCount = _totalEstablishments2.length;\n\n          for (var _iterator3 = _createForOfIteratorHelperLoose(_totalEstablishments2), _step3; !(_step3 = _iterator3()).done;) {\n            var _rating3 = _step3.value;\n            _accumulatedAverageRatingPerDay.fun = _rating3.fun + _accumulatedAverageRatingPerDay.fun;\n            _accumulatedAverageRatingPerDay.difficultyGettingIn = _rating3.difficultyGettingIn + _accumulatedAverageRatingPerDay.difficultyGettingIn;\n            _accumulatedAverageRatingPerDay.difficultyGettingDrink = _rating3.difficultyGettingDrink + _accumulatedAverageRatingPerDay.difficultyGettingDrink;\n            _accumulatedAverageRatingPerDay.genderBreakdown = _rating3.genderBreakdown + _accumulatedAverageRatingPerDay.genderBreakdown;\n            _accumulatedAverageRatingPerDay.crowd = _rating3.crowd + _accumulatedAverageRatingPerDay.crowd;\n          }\n\n          _accumulatedAverageRatingPerDay.fun = (_accumulatedAverageRatingPerDay.fun / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay.difficultyGettingIn = (_accumulatedAverageRatingPerDay.difficultyGettingIn / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay.difficultyGettingDrink = (_accumulatedAverageRatingPerDay.difficultyGettingDrink / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay.genderBreakdown = (_accumulatedAverageRatingPerDay.genderBreakdown / totalEstablishmentsCount).toFixed(1), _accumulatedAverageRatingPerDay.crowd = (_accumulatedAverageRatingPerDay.crowd / totalEstablishmentsCount).toFixed(1);\n          _defaultOrAccumulatedRating = _accumulatedAverageRatingPerDay;\n          finalBusinessRating.isClosed = false;\n          finalBusinessRating.defaultOrAccumulatedRating = _accumulatedAverageRatingPerDay;\n          finalBusinessRating.isDefault = false;\n        }\n      }\n    } else {\n      if (!getOpeningHours.restaurantOpen) {\n        finalBusinessRating.isClosed = true;\n      } else finalBusinessRating.isClosed = false;\n\n      finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n      finalBusinessRating.isDefault = true;\n    }\n  }\n\n  return finalBusinessRating;\n};\n\nvar getSpotMapData = function getSpotMapData(spotsData, settings) {\n  return spotsData.map(function (marker) {\n    var googleBusiness = marker.googleBusiness,\n        customData = marker.customData;\n    var data = {\n      address: googleBusiness ? googleBusiness.formatted_address : customData.address,\n      phoneNo: googleBusiness ? googleBusiness.formatted_phone_number : customData.phoneNo,\n      rating: googleBusiness ? googleBusiness.rating : customData.rating\n    };\n    var getDefaultSettings = changeToDefaultEstablishment(marker, settings);\n    console.log(\"the default settings\", getDefaultSettings);\n    return {\n      markerId: marker._id,\n      longitude: marker.location.coordinates[0],\n      latitude: marker.location.coordinates[1],\n      images: marker.uploadedPhotos.length > 0 ? marker.uploadedPhotos : null,\n      rating: marker.rating,\n      types: marker.category.map(function (category) {\n        return category.title;\n      }),\n      name: marker.name,\n      totalUserCountRating: marker.totalUserCountRating,\n      businessGoogleRating: data.rating,\n      address: data.address,\n      phoneNo: data.phoneNo,\n      location: marker.location.coordinates,\n      mapUrl: googleBusiness ? googleBusiness.url : null,\n      openingHours: marker.googleBusiness.opening_hours,\n      defaultOrAccumulatedRating: getDefaultSettings.defaultOrAccumulatedRating,\n      isDefaultEstablishment: getDefaultSettings.isDefault,\n      isClosed: getDefaultSettings.isClosed\n    };\n  });\n};","map":{"version":3,"sources":["/Users/abubakarakram/development/projects/backup bar peakk/client/redux/helperFunction.js"],"names":["moment","weekDays","getSelectedCategories","barOrNightClub","category","props","selectedCategory","filter","title","barCategories","state","question3","includes","_id","map","getAllCaseData","userVibeData","data","settings","filterVibeCategoryData","goodSpots","averageSpots","badSpots","vibeCategory","business","length","some","rating","defaultOrAccumulatedRating","getDefaultSettings","changeToDefaultEstablishment","difficultyGettingIn","fun","crowd","push","getMapData","getSearchData","searchData","filterCategoryBusinessVibe","goodSpotMarkers","getSpotMapData","badSpotMarkers","averageSpotMarkers","filterBusinessData","allSpots","concat","getKeyByValue","object","value","Object","keys","find","key","getEstablishmentOpeningHours","marker","openingHours","googleBusiness","opening_hours","defaultTime","restaurantOpen","todayDate","format","split","todayDayName","toLowerCase","myCurrentTime","parseInt","toString","replaceAll","specifcDayTimings","periods","day","open","originalTimeOrDefaultTime","close","time","openTime","closeTime","openDay","closeDay","myCurrentDay","openingTime","console","log","getOpeningHours","allRating","finalBusinessRating","isClosed","isDefault","creationAt","completeOpeningTime","unshift","splice","restaurantOpenTime","join","establishmentRating","totalCounts","noOfUsersUntilShowDefault","accumulatedAverageRatingPerDay","genderBreakdown","difficultyGettingDrink","totalRatings","ratingTime","ratioInput","totalEstablishments","totalEstablishmentsCount","toFixed","isCurrentDefault","ratingChangeTime","spotsData","customData","address","formatted_address","phoneNo","formatted_phone_number","markerId","longitude","location","coordinates","latitude","images","uploadedPhotos","types","name","totalUserCountRating","businessGoogleRating","mapUrl","url","isDefaultEstablishment"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nconst weekDays = {\n  0: \"sunday\",\n  1: \"monday\",\n  2: \"tuesday\",\n  3: \"wednesday\",\n  4: \"thursday\",\n  5: \"friday\",\n  6: \"saturday\",\n}\n\nexport const  getSelectedCategories = (barOrNightClub) => {\n  const { category } = this.props.category.category;\n  let selectedCategory;\n\n  if(barOrNightClub === \"nightClub\"){\n    selectedCategory = category.filter(category => category.title === 'Night Clubs')\n  }\n  else{\n    const barCategories = this.state.question3;\n    selectedCategory = category.filter((category)=>  barCategories.includes(category._id) )\n  }\n  return selectedCategory.map(category => category._id)\n}\n\nexport const getAllCaseData = (userVibeData, data, selectedCategory, settings) => {\n  let filterVibeCategoryData = {\n    goodSpots: [],\n    averageSpots: [],\n    badSpots: [],\n    settings: {}\n  };\n  filterVibeCategoryData.settings = settings;\n  let { vibeCategory } = userVibeData; \n  if(vibeCategory === \"Professional Party Time\"){\n    data.map(business => {  \n      if(business.category.length !== 0 && business.category.some(category =>  selectedCategory.includes(category._id) ) ){\n        const { rating } = business;\n        \n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n       \n        if( crowd >= 4 && crowd <= 5 && difficultyGettingIn>=4 && fun>=3)\n          filterVibeCategoryData.goodSpots.push(business)\n      \n        else if( crowd <= 2 &&  difficultyGettingIn<=2 && fun <= 2)\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)  \n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Moderate Party Time\"){\n    data.map(business => {\n      if(business.category.length !== 0 && business.category.some(category =>  selectedCategory.includes(category._id)  ) ){  \n        const { rating} = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n        \n        if(crowd >= 4 && crowd <= 5 && difficultyGettingIn>=3 && fun>=3)\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd <= 2 && difficultyGettingIn<=2 && fun <= 2)\n          filterVibeCategoryData.badSpots.push(business)\n        else\n          filterVibeCategoryData.averageSpots.push(business)\n        \n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Social Drinking\"){\n    data.map(business => {\n      if(business.category.length !== 0 && business.category.some(category =>  selectedCategory.includes(category._id)  ) ){\n        const { rating} = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n        \n        if(crowd >= 3 && crowd <= 4 && difficultyGettingIn <= 2 && fun>=3 )\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd <= 2 && difficultyGettingIn>=4 && fun <3)\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Baby Party Time\"){\n    data.map(business => {\n      if(business.category.length !== 0 && business.category.some(category =>  selectedCategory.includes(category._id)  ) ){\n        const { rating } = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd <=2 && difficultyGettingIn<=2)\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd >= 3 && difficultyGettingIn>=3 )\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else{\n    data.map(business => {\n      if(business.category.length !== 0 && business.category.some(category =>  selectedCategory.includes(category._id)  ) ){\n        const { rating } = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd <=1 && difficultyGettingIn <= 1 )\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd >=3 && difficultyGettingIn >= 4 )\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n\n}\n\nexport const getSearchData = (userVibeData, searchData, settings) => {\n  let filterVibeCategoryData = {\n    goodSpots: [],\n    averageSpots: [],\n    badSpots: [],\n    settings: {}\n  };\n  let { vibeCategory } = userVibeData; \n  filterVibeCategoryData.settings = settings;\n  if( vibeCategory === \"Professional Party Time\" ){\n    searchData.map(business => {\n      if( business.category.length !== 0 ){\n        const { rating } = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n        \n        if( crowd >= 4 && crowd <= 5 && difficultyGettingIn>=4 && fun>=3)\n          filterVibeCategoryData.goodSpots.push(business)\n        else if( crowd <= 2 &&  difficultyGettingIn<=2 && fun <= 2)\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)    \n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Moderate Party Time\"){\n    searchData.map(business => {\n      if(business.category.length !== 0 ){\n        const { rating } = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd >= 4 && crowd <= 5 && difficultyGettingIn>=3 && fun>=3)\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd <= 2 && difficultyGettingIn<=2 && fun <= 2)\n          filterVibeCategoryData.badSpots.push(business)\n        else\n          filterVibeCategoryData.averageSpots.push(business)\n        \n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Social Drinking\"){\n    searchData.map(business => {\n      if(business.category.length !== 0 ){\n        const { rating } = business;\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd >= 3 && crowd <= 4 && difficultyGettingIn <= 2 && fun>=3 )\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd <= 2 && difficultyGettingIn>=4 && fun <3)\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else if(vibeCategory === \"Baby Party Time\"){\n    searchData.map(business => {\n      if(business.category.length !== 0 ){\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd <=2 && difficultyGettingIn<=2)\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd >= 3 && difficultyGettingIn>=3 )\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n  else{\n    searchData.map(business => {\n      if(business.category.length !== 0 ){\n        let defaultOrAccumulatedRating;\n        const getDefaultSettings = changeToDefaultEstablishment(business, settings); \n        defaultOrAccumulatedRating= getDefaultSettings.defaultOrAccumulatedRating\n        const {difficultyGettingIn, fun, crowd } = defaultOrAccumulatedRating;\n\n        if(crowd <=1 && difficultyGettingIn <= 1 )\n          filterVibeCategoryData.goodSpots.push(business)\n        else if(crowd >=3 && difficultyGettingIn >= 4 )\n          filterVibeCategoryData.badSpots.push(business)\n        else \n          filterVibeCategoryData.averageSpots.push(business)\n      }\n    })\n    return getMapData(filterVibeCategoryData);\n  }\n}\n\nconst getMapData = (filterCategoryBusinessVibe)=> {\n\n  const { goodSpots, badSpots, averageSpots, settings } = filterCategoryBusinessVibe;\n\n    const goodSpotMarkers = getSpotMapData(goodSpots, settings);\n    const badSpotMarkers = getSpotMapData(badSpots, settings);\n    const averageSpotMarkers = getSpotMapData(averageSpots, settings);\n    \n    const filterBusinessData =  {\n      goodSpots: goodSpotMarkers,\n      badSpots: badSpotMarkers,\n      averageSpots: averageSpotMarkers,\n      allSpots: goodSpotMarkers.concat(averageSpotMarkers, badSpotMarkers)\n    }\n    \n    return filterBusinessData;\n\n}\nconst getKeyByValue = (object, value) => {\n  return Object.keys(object).find(key => object[key] === value);\n}\n\nconst getEstablishmentOpeningHours = (marker) => {\n  const openingHours  = marker.googleBusiness.opening_hours;\n  var defaultTime = false;\n  let restaurantOpen = true;\n  const todayDate = moment().format('dddd YYYY-MM-DD HH:mm').split(' ');\n  const todayDayName = todayDate[0].toLowerCase();\n  let myCurrentTime = parseInt(todayDate[2].toString().replaceAll(':',''));\n  \n  const specifcDayTimings = openingHours ? openingHours.periods.filter(day => {\n    if(day.open.day === getKeyByValue(weekDays, todayDayName))\n      return true \n  }): null\n  let originalTimeOrDefaultTime;\n  if(specifcDayTimings && specifcDayTimings.length > 0)\n    originalTimeOrDefaultTime = specifcDayTimings[0]\n  else{\n    defaultTime = true;\n    originalTimeOrDefaultTime = {\n      close: {\n        day: parseInt(getKeyByValue(weekDays, todayDayName) + 1) .toString(),\n        time:  \"0200\"\n      },\n      open: {\n        day: getKeyByValue(weekDays, todayDayName).toString(),\n        time:  \"1100\"\n      }\n    }\n  }\n  \n  const openTime = parseInt(originalTimeOrDefaultTime.open.time);\n  const closeTime = parseInt(originalTimeOrDefaultTime.close.time);\n  const openDay = parseInt(originalTimeOrDefaultTime.open.day);\n  const closeDay = parseInt(originalTimeOrDefaultTime.close.day);\n  const myCurrentDay = parseInt(getKeyByValue(weekDays, todayDayName));\n  //console.log(` name: ${marker.name} openTime: ${openTime} , closeTime: ${closeTime} , openDay: ${openDay}, closeDay: ${closeDay}, myCurrentDay: ${myCurrentDay}, my CureentTime: ${myCurrentTime} `)\n\n  if(myCurrentDay === closeDay){\n    if(myCurrentTime>openTime && myCurrentTime < closeTime)\n      restaurantOpen = true\n    else  \n      restaurantOpen = false\n  }\n  else{\n    if(myCurrentTime <= closeTime)\n      restaurantOpen = true\n    else  \n      restaurantOpen = false\n  }\n  return { \n    restaurantOpen, \n    openingTime: restaurantOpen ? openTime : null \n  }\n}\n\nconst changeToDefaultEstablishment = (marker, settings) => {\n  console.log(\"the settings\", settings)\n  const getOpeningHours = getEstablishmentOpeningHours(marker);\n  const { allRating, rating} = marker;\n  let finalBusinessRating = {\n    isClosed: false,\n    isDefault: true,\n    defaultOrAccumulatedRating : {}\n  }\n  const {creationAt} = marker.rating;\n\n  if(creationAt && moment(creationAt).format('YYYY-MM-DD') === moment().format('YYYY-MM-DD') ){\n    if(!getOpeningHours.restaurantOpen){\n      finalBusinessRating.isClosed = true;\n      finalBusinessRating.defaultOrAccumulatedRating = rating\n    }\n    else{ \n      const openingTime = getOpeningHours.openingTime.toString()\n      let completeOpeningTime;\n      if(openingTime.length === 3){\n        completeOpeningTime = openingTime.split('')\n        completeOpeningTime.unshift(0)\n        completeOpeningTime.splice( 2, 0, ':' )\n      }\n      else{\n        completeOpeningTime = openingTime.split('')\n        completeOpeningTime.splice( 2, 0, ':' )\n      }\n      const restaurantOpenTime = moment().format(\"YYYY-MM-DD\") + \" \" + completeOpeningTime.toString().split(',').join(\"\")\n     \n      const establishmentRating = allRating.map(rating => {\n        return {\n          creationAt: rating.creationAt,\n        }\n      });\n    \n      const totalCounts = establishmentRating.filter(rating => {\n        if(moment(rating.creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime && \n          moment(rating.creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > moment(creationAt).format(\"YYYY-MM-DD HH:mm\").toString()\n        )\n          return true\n      }).length\n\n      console.log(\"the total counts\", totalCounts);      \n      const isDefault = totalCounts <= settings.noOfUsersUntilShowDefault ? true : false\n    \n      let accumulatedAverageRatingPerDay = {\n        fun: 0,\n        crowd: 0,\n        genderBreakdown: 0,\n        difficultyGettingIn: 0,\n        difficultyGettingDrink: 0,\n        totalRatings: 0\n      }\n      let defaultOrAccumulatedRating = {};\n      if(isDefault){\n        finalBusinessRating.isClosed = false;\n        finalBusinessRating.defaultOrAccumulatedRating = marker.rating;\n        finalBusinessRating.isDefault = true\n      }\n      else{\n        const establishmentRating = allRating.map(rating => {\n          return {\n            ratingTime: rating.creationAt,\n            fun: rating.fun,\n            crowd: rating.crowd,\n            genderBreakdown: rating.ratioInput,\n            difficultyGettingIn: rating.difficultyGettingIn,\n            difficultyGettingDrink: rating.difficultyGettingDrink,\n          }\n        });\n        \n        const totalEstablishments = establishmentRating.filter(rating => {\n          if(moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime && \n            moment(creationAt).format(\"YYYY-MM-DD HH:mm\").toString() > moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() \n          )\n            return true\n        })\n        var totalEstablishmentsCount = totalEstablishments.length;\n        for (let rating of totalEstablishments){\n          accumulatedAverageRatingPerDay.fun = rating.fun + accumulatedAverageRatingPerDay.fun\n          accumulatedAverageRatingPerDay.difficultyGettingIn = rating.difficultyGettingIn + accumulatedAverageRatingPerDay.difficultyGettingIn\n          accumulatedAverageRatingPerDay.difficultyGettingDrink = rating.difficultyGettingDrink + accumulatedAverageRatingPerDay.difficultyGettingDrink\n          accumulatedAverageRatingPerDay.genderBreakdown = rating.genderBreakdown + accumulatedAverageRatingPerDay.genderBreakdown\n          accumulatedAverageRatingPerDay.crowd = rating.crowd + accumulatedAverageRatingPerDay.crowd\n        }\n        accumulatedAverageRatingPerDay.fun = (accumulatedAverageRatingPerDay.fun/totalEstablishmentsCount).toFixed(1),\n        accumulatedAverageRatingPerDay.difficultyGettingIn = (accumulatedAverageRatingPerDay.difficultyGettingIn/totalEstablishmentsCount).toFixed(1),\n        accumulatedAverageRatingPerDay.difficultyGettingDrink = (accumulatedAverageRatingPerDay.difficultyGettingDrink/totalEstablishmentsCount).toFixed(1),\n        accumulatedAverageRatingPerDay.genderBreakdown = (accumulatedAverageRatingPerDay.genderBreakdown/totalEstablishmentsCount).toFixed(1),\n        accumulatedAverageRatingPerDay.crowd = (accumulatedAverageRatingPerDay.crowd/totalEstablishmentsCount).toFixed(1)\n\n        defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n        finalBusinessRating.isClosed = false;\n        finalBusinessRating.defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n        finalBusinessRating.isDefault = false\n      }\n    }\n  }\n  else{\n    if(allRating.length>0 ){\n      if(!getOpeningHours.restaurantOpen){\n        finalBusinessRating.isClosed = true;\n      }\n      else{ \n        const openingTime = getOpeningHours.openingTime.toString()\n        let completeOpeningTime;\n  \n        if(openingTime.length === 3){\n          completeOpeningTime = openingTime.split('')\n          completeOpeningTime.unshift(0)\n          completeOpeningTime.splice( 2, 0, ':' )\n        }\n        else{\n          completeOpeningTime = openingTime.split('')\n          completeOpeningTime.splice( 2, 0, ':' )\n        }\n        let restaurantOpenTime = moment().format(\"YYYY-MM-DD\") + \" \" + completeOpeningTime.toString().split(',').join(\"\")\n\n        const establishmentRating = allRating.map(rating => {\n          return {\n            ratingTime: rating.creationAt,\n            fun: rating.fun,\n            crowd: rating.crowd,\n            genderBreakdown: rating.ratioInput,\n            difficultyGettingIn: rating.difficultyGettingIn,\n            difficultyGettingDrink: rating.difficultyGettingDrink,\n          }\n        });\n        \n        console.log(\"the restaurant open\", restaurantOpenTime)\n        console.log(\"the establishment rating\", establishmentRating);\n        const totalCounts = establishmentRating.filter(ratingTime => {\n          if(moment(ratingTime.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString()  > restaurantOpenTime)\n            return true\n        }).length\n\n        console.log(\"the total counts......\", totalCounts)\n\n        const isDefault = totalCounts <= settings.noOfUsersUntilShowDefault ? true : false\n        let accumulatedAverageRatingPerDay = {\n          fun: 0,\n          crowd: 0,\n          genderBreakdown: 0,\n          difficultyGettingIn: 0,\n          difficultyGettingDrink: 0,\n          totalRatings: 0\n        }\n        let defaultOrAccumulatedRating = {};\n        if(isDefault){\n          finalBusinessRating.isClosed = false;\n          finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n          finalBusinessRating.isDefault = true\n        }\n        else if(settings.isCurrentDefault){\n          \n          \n          const totalEstablishments = establishmentRating.filter(rating => {\n            if(moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime && \n             moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > moment(settings.ratingChangeTime).format(\"YYYY-MM-DD HH:mm\").toString() \n            )\n              return true\n          })\n\n          console.log(\"after adminn set itss\", totalEstablishments)\n          console.log(\"the totallll blinkers after set\", totalEstablishments.length)\n          var totalEstablishmentsCount = totalEstablishments.length;\n          const isDefault = totalEstablishments.length <= settings.noOfUsersUntilShowDefault ? true : false\n          let accumulatedAverageRatingPerDay = {\n            fun: 0,\n            crowd: 0,\n            genderBreakdown: 0,\n            difficultyGettingIn: 0,\n            difficultyGettingDrink: 0,\n            totalRatings: 0\n          }\n          let defaultOrAccumulatedRating = {};\n          if(isDefault){\n            finalBusinessRating.isClosed = false;\n            finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n            finalBusinessRating.isDefault = true\n          }\n          else {\n            for (let rating of totalEstablishments){\n              accumulatedAverageRatingPerDay.fun = rating.fun + accumulatedAverageRatingPerDay.fun\n              accumulatedAverageRatingPerDay.difficultyGettingIn = rating.difficultyGettingIn + accumulatedAverageRatingPerDay.difficultyGettingIn\n              accumulatedAverageRatingPerDay.difficultyGettingDrink = rating.difficultyGettingDrink + accumulatedAverageRatingPerDay.difficultyGettingDrink\n              accumulatedAverageRatingPerDay.genderBreakdown = rating.genderBreakdown + accumulatedAverageRatingPerDay.genderBreakdown\n              accumulatedAverageRatingPerDay.crowd = rating.crowd + accumulatedAverageRatingPerDay.crowd\n            }\n           \n            accumulatedAverageRatingPerDay.fun = (accumulatedAverageRatingPerDay.fun/totalEstablishmentsCount).toFixed(1),\n            accumulatedAverageRatingPerDay.difficultyGettingIn = (accumulatedAverageRatingPerDay.difficultyGettingIn/totalEstablishmentsCount).toFixed(1),\n            accumulatedAverageRatingPerDay.difficultyGettingDrink = (accumulatedAverageRatingPerDay.difficultyGettingDrink/totalEstablishmentsCount).toFixed(1),\n            accumulatedAverageRatingPerDay.genderBreakdown = (accumulatedAverageRatingPerDay.genderBreakdown/totalEstablishmentsCount).toFixed(1),\n            accumulatedAverageRatingPerDay.crowd = (accumulatedAverageRatingPerDay.crowd/totalEstablishmentsCount).toFixed(1)\n    \n            finalBusinessRating.isClosed = false;\n            finalBusinessRating.defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n            finalBusinessRating.isDefault = false\n          }\n        }\n        else{\n          const establishmentRating = allRating.map(rating => {\n            return {\n              ratingTime: rating.creationAt,\n              fun: rating.fun,\n              crowd: rating.crowd,\n              genderBreakdown: rating.ratioInput,\n              difficultyGettingIn: rating.difficultyGettingIn,\n              difficultyGettingDrink: rating.difficultyGettingDrink,\n            }\n          });\n          \n          const totalEstablishments = establishmentRating.filter(rating => {\n            if(moment(rating.ratingTime).format(\"YYYY-MM-DD HH:mm\").toString() > restaurantOpenTime)\n              return true\n          })\n    \n          var totalEstablishmentsCount = totalEstablishments.length;\n          for (let rating of totalEstablishments){\n            accumulatedAverageRatingPerDay.fun = rating.fun + accumulatedAverageRatingPerDay.fun\n            accumulatedAverageRatingPerDay.difficultyGettingIn = rating.difficultyGettingIn + accumulatedAverageRatingPerDay.difficultyGettingIn\n            accumulatedAverageRatingPerDay.difficultyGettingDrink = rating.difficultyGettingDrink + accumulatedAverageRatingPerDay.difficultyGettingDrink\n            accumulatedAverageRatingPerDay.genderBreakdown = rating.genderBreakdown + accumulatedAverageRatingPerDay.genderBreakdown\n            accumulatedAverageRatingPerDay.crowd = rating.crowd + accumulatedAverageRatingPerDay.crowd\n          }\n          accumulatedAverageRatingPerDay.fun = (accumulatedAverageRatingPerDay.fun/totalEstablishmentsCount).toFixed(1),\n          accumulatedAverageRatingPerDay.difficultyGettingIn = (accumulatedAverageRatingPerDay.difficultyGettingIn/totalEstablishmentsCount).toFixed(1),\n          accumulatedAverageRatingPerDay.difficultyGettingDrink = (accumulatedAverageRatingPerDay.difficultyGettingDrink/totalEstablishmentsCount).toFixed(1),\n          accumulatedAverageRatingPerDay.genderBreakdown = (accumulatedAverageRatingPerDay.genderBreakdown/totalEstablishmentsCount).toFixed(1),\n          accumulatedAverageRatingPerDay.crowd = (accumulatedAverageRatingPerDay.crowd/totalEstablishmentsCount).toFixed(1)\n  \n          defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n          finalBusinessRating.isClosed = false;\n          finalBusinessRating.defaultOrAccumulatedRating = accumulatedAverageRatingPerDay;\n          finalBusinessRating.isDefault = false\n        }\n      }\n    }\n    else {\n      if(!getOpeningHours.restaurantOpen){\n        finalBusinessRating.isClosed = true;\n      }\n      else\n        finalBusinessRating.isClosed = false;\n      finalBusinessRating.defaultOrAccumulatedRating = settings.rating;\n      finalBusinessRating.isDefault = true\n    }\n  }\n  return finalBusinessRating;\n}\n\nconst getSpotMapData = (spotsData, settings) => {\n  return spotsData.map((marker)=>{\n    const {googleBusiness, customData} = marker\n    const data = {\n      address: googleBusiness ? googleBusiness.formatted_address : customData.address,\n      phoneNo: googleBusiness ? googleBusiness.formatted_phone_number : customData.phoneNo,\n      rating: googleBusiness ? googleBusiness.rating : customData.rating\n    }\n\n    const getDefaultSettings = changeToDefaultEstablishment(marker, settings); \n    console.log(\"the default settings\", getDefaultSettings);\n\n    return {\n      markerId: marker._id,\n      longitude: marker.location.coordinates[0],\n      latitude: marker.location.coordinates[1],\n      images:  marker.uploadedPhotos.length > 0 ? marker.uploadedPhotos: null,\n      rating: marker.rating,\n      types: marker.category.map((category)=> category.title ),\n      name: marker.name,\n      totalUserCountRating: marker.totalUserCountRating,\n      businessGoogleRating: data.rating,\n      address: data.address,\n      phoneNo: data.phoneNo,\n      location: marker.location.coordinates,\n      mapUrl: googleBusiness ? googleBusiness.url : null,\n      openingHours: marker.googleBusiness.opening_hours,\n      defaultOrAccumulatedRating: getDefaultSettings.defaultOrAccumulatedRating,\n      isDefaultEstablishment: getDefaultSettings.isDefault,\n      isClosed: getDefaultSettings.isClosed   \n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}