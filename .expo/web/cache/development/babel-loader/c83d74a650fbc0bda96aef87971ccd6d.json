{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/abubakarakram/development/projects/backup bar peakk/client/src/screens/SplashScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport * as SplashScreen from 'expo-splash-screen';\nimport { withNavigation } from 'react-navigation';\nimport { getUserData } from \"../components/localStorage\";\nimport { getUser } from \"../../redux/actions/User\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nvar SplashedScreen = function (_Component) {\n  _inherits(SplashedScreen, _Component);\n\n  var _super = _createSuper(SplashedScreen);\n\n  function SplashedScreen() {\n    var _this;\n\n    _classCallCheck(this, SplashedScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      appIsReady: false,\n      usersData: []\n    };\n\n    _this.prepareResources = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"calling\");\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(_this.performAPICalls());\n\n            case 3:\n              _this.setState({\n                appIsReady: true\n              }, function _callee() {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(SplashedScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation;\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              navigation = this.props.navigation;\n              navigation.addListener(\"focus\", function _callee3() {\n                return _regeneratorRuntime.async(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.prev = 0;\n                        _context3.next = 3;\n                        return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n                      case 3:\n                        _context3.next = 8;\n                        break;\n\n                      case 5:\n                        _context3.prev = 5;\n                        _context3.t0 = _context3[\"catch\"](0);\n                        console.warn(_context3.t0);\n\n                      case 8:\n                        setTimeout(function () {\n                          _this2.prepareResources();\n                        }, 100);\n\n                      case 9:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, null, null, [[0, 5]], Promise);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"performAPICalls\",\n    value: function performAPICalls() {\n      var navigation, _await$getUserData, token, userId, user;\n\n      return _regeneratorRuntime.async(function performAPICalls$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              navigation = this.props.navigation;\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(getUserData());\n\n            case 3:\n              _await$getUserData = _context5.sent;\n              token = _await$getUserData.token;\n              userId = _await$getUserData.userId;\n              console.log(\"calling splash\");\n              _context5.next = 9;\n              return _regeneratorRuntime.awrap(this.props.getUser());\n\n            case 9:\n              user = _context5.sent;\n              console.log(\"in splash\", user);\n              console.log(\"token is \" + token + \" and userId is \" + userId);\n              if (token && userId && user === \"ok\") navigation.navigate('HomeApp');else {\n                console.log(\"in login Screen\");\n                navigation.navigate('LoginScreen');\n              }\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.appIsReady) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: styles.imageStyle,\n        resize: \"contain\",\n        source: require(\"../../assets/splashtest.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#7D837D\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return SplashedScreen;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getUser: getUser\n  }, dispatch);\n};\n\nexport default connect(null, mapDispatchToProps)(SplashedScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#2b3538'\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  imageStyle: {\n    width: '100%',\n    height: '100%',\n    marginBottom: \"10%\",\n    resizeMode: \"contain\"\n  },\n  logoContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10\n  }\n});","map":{"version":3,"sources":["/Users/abubakarakram/development/projects/backup bar peakk/client/src/screens/SplashScreen.js"],"names":["React","Component","AsyncStorage","SplashScreen","withNavigation","getUserData","getUser","connect","bindActionCreators","SplashedScreen","state","appIsReady","usersData","prepareResources","console","log","performAPICalls","setState","hideAsync","navigation","props","addListener","preventAutoHideAsync","warn","setTimeout","token","userId","user","navigate","styles","container","imageStyle","require","mapDispatchToProps","dispatch","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","text","color","fontWeight","width","height","marginBottom","resizeMode","logoContainer","horizontal","flexDirection","padding"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { StyleSheet, Text, View, Image, ActivityIndicator, Dimensions, AsyncStorage } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { withNavigation } from 'react-navigation';\nimport { getUserData } from '../components/localStorage';\nimport { getUser } from '../../redux/actions/User';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\n class SplashedScreen extends Component {\n  state = {\n    appIsReady: false,\n    usersData: []\n  };\n\n  async componentDidMount() {\n    // Prevent native splash screen from autohiding\n    // console.log(\"in splash\")\n    const { navigation } = this.props;\n    // console.log(\"the navigation in splash\", navigation)\n    navigation.addListener(\"focus\", async () => {\n      try {\n        await SplashScreen.preventAutoHideAsync();\n      } catch (e) {\n        console.warn(e);\n      }\n      setTimeout(()=>{ this.prepareResources() }, 100)\n\n    })\n  }\n\n  async performAPICalls() {\n    const { navigation } = this.props;\n    const { token, userId } =  await getUserData();\n    console.log(\"calling splash\")\n    const user = await this.props.getUser()\n    console.log(\"in splash\", user)\n     console.log(`token is ${token} and userId is ${userId}`);\n    if(token && userId && user === \"ok\" )\n      navigation.navigate('HomeApp')\n    else{\n      console.log(\"in login Screen\")\n      navigation.navigate('LoginScreen')\n    }\n      \n  }\n\n  prepareResources = async () => {\n    console.log(\"calling\")\n    await this.performAPICalls();\n\n    this.setState({ appIsReady: true }, async () => {\n      await SplashScreen.hideAsync();\n    });\n  };\n\n  render() {\n    if (!this.state.appIsReady) {\n      return null;\n    }\n\n    return (\n      <View style={styles.container}>\n        <Image\n          style = { styles.imageStyle }\n          resize = \"contain\"\n          source = { require('../../assets/splashtest.png') }\n        />\n        <View >\n          <ActivityIndicator size=\"large\" color=\"#7D837D\" />\n        </View>\n      </View>\n    );\n  }\n}\n\n// export default withNavigation(SplashedScreen);\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({\n    getUser\n  }, dispatch)\n);\n\nexport default connect(null, mapDispatchToProps)(SplashedScreen);\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#2b3538',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n  imageStyle:{\n    width: '100%',\n    height: '100%',\n    marginBottom: \"10%\",\n    resizeMode: \"contain\"\n  },\n  logoContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  horizontal: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    padding: 10\n  }\n});\n"]},"metadata":{},"sourceType":"module"}