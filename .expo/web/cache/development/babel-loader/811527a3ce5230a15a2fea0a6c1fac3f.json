{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/abubakarakram/development/projects/backup bar peakk/client/src/components/ImageUploader.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\nexport default function ImagePickerExample(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status, _image;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n              console.log(\"the status\", status);\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n              _image = props.profilePic ? props.profilePic : \"https://res.cloudinary.com/developer-inn/image/upload/v1607354990/Account-512_rmc3wq.png\";\n              setImage(_image);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var cloudinaryUpload = function cloudinaryUpload(base64) {\n    var base64Img = \"data:image/jpg;base64,\" + base64;\n    console.log(\"the base\", base64);\n    var apiUrl = 'https://api.cloudinary.com/v1_1/developer-inn/image/upload';\n    var data = {\n      \"file\": base64Img,\n      \"upload_preset\": \"obid55oq\"\n    };\n    fetch(apiUrl, {\n      body: JSON.stringify(data),\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST'\n    }).then(function _callee2(r) {\n      var data;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(r.json());\n\n            case 2:\n              data = _context2.sent;\n              props.onUpload(data.secure_url);\n              return _context2.abrupt(\"return\", data.secure_url);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }).catch(function (err) {\n      return console.log(\"the error\", err);\n    });\n  };\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1,\n              base64: true\n            }));\n\n          case 2:\n            result = _context3.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n            cloudinaryUpload(result.base64);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    style: {\n      position: \"absolute\"\n    },\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    resizeMode: \"cover\",\n    style: {\n      width: 280,\n      height: 180\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/abubakarakram/development/projects/backup bar peakk/client/src/components/ImageUploader.js"],"names":["React","useState","useEffect","ImagePicker","Constants","Permissions","ImagePickerExample","props","image","setImage","Platform","OS","requestCameraRollPermissionsAsync","status","console","log","alert","profilePic","cloudinaryUpload","base64","base64Img","apiUrl","data","fetch","body","JSON","stringify","headers","method","then","r","json","onUpload","secure_url","catch","err","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","flex","alignItems","justifyContent","position","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Image, View, Platform } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\n\nexport default function ImagePickerExample(props) {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\n        console.log(\"the status\", status)\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n        const image = props.profilePic ? props.profilePic : \"https://res.cloudinary.com/developer-inn/image/upload/v1607354990/Account-512_rmc3wq.png\"  \n        setImage(image)\n      }\n    })();\n  }, []);\n\n  const cloudinaryUpload = (base64) => {\n    let base64Img = `data:image/jpg;base64,${base64}`\n    console.log(\"the base\", base64);\n    //Add your cloud name\n    let apiUrl = 'https://api.cloudinary.com/v1_1/developer-inn/image/upload';\n\n    let data = {\n      \"file\": base64Img,\n      \"upload_preset\": \"obid55oq\",\n    }\n\n    fetch(apiUrl, {\n      body: JSON.stringify(data),\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n    }).then(async r => {\n        let data = await r.json()\n        props.onUpload(data.secure_url);\n        return data.secure_url\n    }).catch(err=>console.log( \"the error\", err))\n  }\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n      base64: true\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n    \n    cloudinaryUpload(result.base64)\n\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button style = {{ position: \"absolute\" }} title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} resizeMode = \"cover\" style={{ width: 280, height: 180 }} />}\n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}