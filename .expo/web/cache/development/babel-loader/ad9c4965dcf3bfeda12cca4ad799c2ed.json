{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Near_Location_Business, FILTERED_BUSINESS, Empty_Business, ADD_Rating, Search_Results, getFavouritesBusiness, selectSpecifcCategoryEstablishments, Update_Rating, GET_ADMIN_SETTINGS } from \"../types\";\nimport { graphql, stripIgnoredCharacters } from 'graphql';\nimport axios from \"../../src/api/axios\";\nimport { getUserData } from \"../../src/components/localStorage\";\nimport Category from \"../reducers/Category\";\nimport haversine from 'haversine-distance';\nimport { getAllCaseData, getSelectedCategories, getSearchData } from \"../helperFunction\";\n\nvar getMiles = function getMiles(i) {\n  return i * 0.000621371192;\n};\n\nvar sortSpotsByDistanceAway = function sortSpotsByDistanceAway(markerList) {\n  return markerList.sort(function (a, b) {\n    return parseFloat(a.distanceAway) - parseFloat(b.distanceAway);\n  });\n};\n\nexport var addToFavourite = function addToFavourite(id) {\n  return function _callee(dispatch, getState) {\n    var _getState, business, _await$getUserData, token, favouriteBusiness, addOrRemove, body, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _getState = getState(), business = _getState.business;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getUserData());\n\n          case 3:\n            _await$getUserData = _context.sent;\n            token = _await$getUserData.token;\n            favouriteBusiness = business.business.favouriteBusiness;\n            addOrRemove = \"\";\n            if (favouriteBusiness.map(function (business) {\n              return business._id;\n            }).includes(id)) addOrRemove = \"remove\";else addOrRemove = \"add\";\n            body = {\n              query: \" mutation{\\n        addToFavourites(id: \\\"\" + id + \"\\\", addOrRemove: \\\"\" + addOrRemove + \"\\\") {  \\n          _id\\n          category{\\n              title\\n              _id\\n              type\\n          }    \\n          name\\n          rating{\\n            fun,\\n            crowd,\\n            ratioInput,\\n            difficultyGettingIn,\\n            difficultyGettingDrink\\n          }\\n          name\\n          totalUserCountRating\\n          ageInterval\\n          customBusiness\\n          customData{\\n            address\\n            phoneNo\\n            rating\\n          }\\n          location{\\n            type\\n            coordinates\\n          }\\n          uploadedPhotos{\\n              secure_url\\n          }\\n          googleBusiness{\\n            formatted_address\\n            formatted_phone_number\\n            name\\n            place_id\\n            user_ratings_total\\n            rating\\n            url\\n            types,\\n            opening_hours\\n          }\\n      }\\n    }\\n    \"\n            };\n            _context.prev = 9;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(axios.post(\"graphql?\", body, {\n              headers: {\n                'Authorization': \"Bearer \" + token\n              }\n            }));\n\n          case 12:\n            res = _context.sent;\n            dispatch({\n              type: getFavouritesBusiness,\n              payload: res.data.data.addToFavourites\n            });\n            return _context.abrupt(\"return\", Promise.resolve(addOrRemove));\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](9);\n            console.log(\"the err\", _context.t0.response.data);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[9, 17]], Promise);\n  };\n};\nexport var selectSpecifcCategoryEstablishmentsAction = function selectSpecifcCategoryEstablishmentsAction(categoryId) {\n  return function _callee2(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: selectSpecifcCategoryEstablishments,\n              payload: categoryId\n            });\n            setTimeout(function () {\n              return Promise.resolve('ok');\n            }, 500);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getFavouritesBusinessAction = function getFavouritesBusinessAction() {\n  return function _callee3(dispatch, getState) {\n    var _await$getUserData2, token, body, res;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(getUserData());\n\n          case 2:\n            _await$getUserData2 = _context3.sent;\n            token = _await$getUserData2.token;\n            body = {\n              query: \" \\n      query{\\n        getFavouriteEstablishments \\n          {  _id\\n            category{\\n              title\\n              _id\\n              type\\n            }    \\n            name\\n            rating{\\n              fun,\\n              crowd,\\n              ratioInput,\\n              difficultyGettingIn,\\n              difficultyGettingDrink\\n            }\\n            name\\n            totalUserCountRating\\n            ageInterval\\n            customBusiness\\n            customData{\\n              address\\n              phoneNo\\n              rating\\n            }\\n            allRating{\\n              creationAt\\n              fun\\n              crowd\\n              ratioInput\\n              difficultyGettingIn\\n              difficultyGettingDrink\\n            }\\n            location{\\n              type\\n              coordinates\\n            }\\n            uploadedPhotos{\\n              secure_url\\n            }\\n            googleBusiness{\\n              formatted_address\\n              formatted_phone_number\\n              name\\n              place_id\\n              user_ratings_total\\n              rating\\n              url\\n              types\\n              opening_hours{\\n                periods{\\n                  close{\\n                    day,\\n                    time\\n                  },\\n                  open{\\n                    day,\\n                    time\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n\\n      \"\n            };\n            _context3.prev = 5;\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(axios.post(\"graphql?\", body, {\n              headers: {\n                'Authorization': \"Bearer \" + token\n              }\n            }));\n\n          case 8:\n            res = _context3.sent;\n            dispatch({\n              type: getFavouritesBusiness,\n              payload: res.data.data.getFavouriteEstablishments\n            });\n            _context3.next = 15;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](5);\n            console.log(\"the err in fvrites\", _context3.t0.response);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[5, 12]], Promise);\n  };\n};\nexport var getSearchBusinesses = function getSearchBusinesses(searchValue) {\n  return function _callee4(dispatch, getState) {\n    var body, res;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            body = {\n              query: \"query{\\n        searchByUser(searchValue: \\\"\" + searchValue + \"\\\")\\n         {   _id\\n            placeId\\n            category{\\n                title\\n                _id\\n            }    \\n            name\\n            rating{\\n              fun,\\n              crowd,\\n              ratioInput,\\n              difficultyGettingIn,\\n              difficultyGettingDrink\\n            }\\n            totalUserCountRating\\n            ageInterval\\n            customData{\\n              address\\n              phoneNo\\n              rating\\n            }\\n            allRating{\\n              creationAt\\n              fun\\n              crowd\\n              ratioInput\\n              difficultyGettingIn\\n              difficultyGettingDrink\\n            }\\n            uploadedPhotos{\\n              secure_url\\n            }\\n            location{\\n              type\\n              coordinates\\n            }\\n            googleBusiness{\\n              formatted_address\\n              formatted_phone_number\\n              name\\n              place_id\\n              user_ratings_total\\n              rating\\n              url\\n              types\\n              opening_hours{\\n                periods{\\n                  close{\\n                    day,\\n                    time\\n                  },\\n                  open{\\n                    day,\\n                    time\\n                  }\\n                }\\n              }\\n            }        \\n         }\\n         }\\n\\n      \"\n            };\n            _context4.prev = 1;\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"graphql?\", body));\n\n          case 4:\n            res = _context4.sent;\n            dispatch({\n              type: Search_Results,\n              payload: res.data.data.searchByUser\n            });\n            return _context4.abrupt(\"return\", Promise.resolve(res.data.data.searchByUser));\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](1);\n            console.log(\"the err\", _context4.t0.response.data);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n};\nexport var getNearLocationBusiness = function getNearLocationBusiness(_ref, updatedRadius) {\n  var latitude = _ref.latitude,\n      longitude = _ref.longitude;\n  return function _callee5(dispatch, getState) {\n    var _getState2, user, radius, finalRadius, _await$getUserData3, token, body, res;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _getState2 = getState(), user = _getState2.user;\n            radius = user.user.user.radius;\n            finalRadius = updatedRadius ? updatedRadius : radius;\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(getUserData());\n\n          case 5:\n            _await$getUserData3 = _context5.sent;\n            token = _await$getUserData3.token;\n            console.log(\"the data\", latitude, longitude, finalRadius);\n            body = {\n              query: \"\\n      query{\\n        getNearByLocationBusiness(locationInput: { latitude: \" + latitude.toFixed(5) + \", longitude: \" + longitude.toFixed(5) + \", radius: \" + finalRadius + \" }){\\n        _id\\n        placeId\\n        category{\\n            title\\n            _id\\n        }    \\n        name\\n        rating{\\n          fun,\\n          crowd,\\n          ratioInput,\\n          difficultyGettingIn,\\n          difficultyGettingDrink,\\n          creationAt\\n        }\\n        totalUserCountRating\\n        ageInterval\\n        customData{\\n          address\\n          phoneNo\\n          rating\\n        }\\n        allRating{\\n          creationAt\\n          fun\\n          crowd\\n          ratioInput\\n          difficultyGettingIn\\n          difficultyGettingDrink\\n        }\\n        uploadedPhotos{\\n          secure_url\\n        }\\n        location{\\n          type\\n          coordinates\\n        }\\n        googleBusiness{\\n          formatted_address\\n          formatted_phone_number\\n          name\\n          place_id\\n          user_ratings_total\\n          rating\\n          url\\n          types\\n          opening_hours{\\n            periods{\\n              close{\\n                day,\\n                time\\n              },\\n              open{\\n                day,\\n                time\\n              }\\n            }\\n          }\\n        }\\n        }}\\n      \"\n            };\n            _context5.prev = 9;\n            _context5.next = 12;\n            return _regeneratorRuntime.awrap(axios.post(\"graphql?\", body, {\n              headers: {\n                'Authorization': \"Bearer \" + token\n              }\n            }));\n\n          case 12:\n            res = _context5.sent;\n            console.log(\"the data\", res.data.data.getNearByLocationBusiness);\n            dispatch({\n              type: Near_Location_Business,\n              payload: res.data.data.getNearByLocationBusiness\n            });\n            return _context5.abrupt(\"return\", Promise.resolve(res.data.data.getNearByLocationBusiness));\n\n          case 18:\n            _context5.prev = 18;\n            _context5.t0 = _context5[\"catch\"](9);\n            console.log(\"hte errorsss\", _context5.t0.response.data);\n\n          case 21:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[9, 18]], Promise);\n  };\n};\nexport var getAdminSettings = function getAdminSettings() {\n  return function _callee6(dispatch, getState) {\n    var getAdminData;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(axios.get('/getdefaultSettings'));\n\n          case 2:\n            getAdminData = _context6.sent;\n            dispatch({\n              type: GET_ADMIN_SETTINGS,\n              payload: getAdminData.data.settings\n            });\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getfilteredBusiness = function getfilteredBusiness(selectedMainCategory, search, favourite) {\n  return function _callee7(dispatch, getState) {\n    var _getState3, vibe, business, category, user, data, searchData, favouriteEstablishments, actualVibe, allCategories, favouriteEstablishmentCategory, selectedCategory, filterCategoryBusinessVibe, favouriteBusiness, _filterCategoryBusine, allSpots, _user$user$location, latitude, longitude, userLocation, destinationLocation, markerList;\n\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _getState3 = getState(), vibe = _getState3.vibe, business = _getState3.business, category = _getState3.category, user = _getState3.user;\n            data = business.business.businesses;\n            searchData = business.business.searchResults;\n            favouriteEstablishments = business.business.favouriteBusiness;\n            actualVibe = vibe.vibe.vibe;\n            allCategories = category.category.category;\n            favouriteEstablishmentCategory = business.business.selectedEstablishmentCategory;\n            selectedCategory = [];\n\n            if (!search) {\n              if (selectedMainCategory !== null) selectedCategory = allCategories.filter(function (category) {\n                return selectedMainCategory.includes(category._id);\n              }).map(function (specificCategory) {\n                return specificCategory._id;\n              });else {\n                selectedCategory = allCategories.filter(function (category) {\n                  return actualVibe.selectedCategories.includes(category._id);\n                }).map(function (specificCategory) {\n                  return specificCategory._id;\n                });\n              }\n            }\n\n            try {\n              if (search) filterCategoryBusinessVibe = getSearchData(actualVibe, searchData, business.business.adminSettings);else if (favourite) {\n                favouriteBusiness = favouriteEstablishments.filter(function (business) {\n                  return business.category.map(function (category) {\n                    return category._id;\n                  }).includes(favouriteEstablishmentCategory);\n                });\n                filterCategoryBusinessVibe = getSearchData(actualVibe, favouriteBusiness, business.business.adminSettings);\n              } else filterCategoryBusinessVibe = getAllCaseData(actualVibe, data, selectedCategory, business.business.adminSettings);\n              _filterCategoryBusine = filterCategoryBusinessVibe, allSpots = _filterCategoryBusine.allSpots;\n              _user$user$location = user.user.location, latitude = _user$user$location.latitude, longitude = _user$user$location.longitude;\n              userLocation = {\n                lat: latitude,\n                lng: longitude\n              };\n              destinationLocation = {};\n              markerList = allSpots.map(function (marker) {\n                destinationLocation = {\n                  lat: marker.latitude,\n                  lng: marker.longitude\n                };\n                return _objectSpread(_objectSpread({}, marker), {}, {\n                  distanceAway: getMiles(haversine(userLocation, destinationLocation)).toFixed(2)\n                });\n              });\n              filterCategoryBusinessVibe.allSpots = sortSpotsByDistanceAway(markerList);\n              filterCategoryBusinessVibe.isFavorite = favourite ? true : false;\n              dispatch({\n                type: FILTERED_BUSINESS,\n                payload: filterCategoryBusinessVibe\n              });\n            } catch (err) {\n              console.log(\"hte errorsss\", err);\n            }\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var emptyBusiness = function emptyBusiness() {\n  return function _callee8(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            dispatch({\n              type: Empty_Business,\n              payload: null\n            });\n            setTimeout(function () {\n              return Promise.resolve('ok');\n            }, 2000);\n\n          case 2:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addRating = function addRating(data) {\n  return function _callee9(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            dispatch({\n              type: ADD_Rating,\n              payload: data\n            });\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateSpecificBusinessRating = function updateSpecificBusinessRating(data) {\n  return function _callee10(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            dispatch({\n              type: Update_Rating,\n              payload: data\n            });\n\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/abubakarakram/development/projects/backup bar peakk/client/redux/actions/Business.js"],"names":["Near_Location_Business","FILTERED_BUSINESS","Empty_Business","ADD_Rating","Search_Results","getFavouritesBusiness","selectSpecifcCategoryEstablishments","Update_Rating","GET_ADMIN_SETTINGS","graphql","stripIgnoredCharacters","axios","getUserData","Category","haversine","getAllCaseData","getSelectedCategories","getSearchData","getMiles","i","sortSpotsByDistanceAway","markerList","sort","a","b","parseFloat","distanceAway","addToFavourite","id","dispatch","getState","business","token","favouriteBusiness","addOrRemove","map","_id","includes","body","query","post","headers","res","type","payload","data","addToFavourites","Promise","resolve","console","log","response","selectSpecifcCategoryEstablishmentsAction","categoryId","setTimeout","getFavouritesBusinessAction","getFavouriteEstablishments","getSearchBusinesses","searchValue","searchByUser","getNearLocationBusiness","updatedRadius","latitude","longitude","user","radius","finalRadius","toFixed","getNearByLocationBusiness","getAdminSettings","get","getAdminData","settings","getfilteredBusiness","selectedMainCategory","search","favourite","vibe","category","businesses","searchData","searchResults","favouriteEstablishments","actualVibe","allCategories","favouriteEstablishmentCategory","selectedEstablishmentCategory","selectedCategory","filter","specificCategory","selectedCategories","filterCategoryBusinessVibe","adminSettings","allSpots","location","userLocation","lat","lng","destinationLocation","marker","isFavorite","err","emptyBusiness","addRating","updateSpecificBusinessRating"],"mappings":"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","sourcesContent":["import {\n  Near_Location_Business, \n  FILTERED_BUSINESS, \n  Empty_Business, \n  ADD_Rating, \n  Search_Results, \n  getFavouritesBusiness, \n  selectSpecifcCategoryEstablishments, \n  Update_Rating, \n  GET_ADMIN_SETTINGS,\n} from '../types'; \nimport { graphql, stripIgnoredCharacters } from 'graphql';\nimport axios from '../../src/api/axios';\nimport { getUserData } from '../../src/components/localStorage'; \nimport Category from '../reducers/Category';\nimport haversine from 'haversine-distance'\nimport { getAllCaseData , getSelectedCategories, getSearchData } from \"../helperFunction\";\n\nlet getMiles = (i) => {\n  return i*0.000621371192;\n}\n\n\nlet sortSpotsByDistanceAway = (markerList) => {\n  return markerList.sort(function(a, b) {\n    return parseFloat(a.distanceAway) - parseFloat(b.distanceAway);\n  });\n}\n\n\n\nexport const addToFavourite = (id) => async (dispatch, getState) => {\n  const { business } = getState();\n  const { token } = await getUserData();\n  const {  favouriteBusiness } = business.business;\n  let addOrRemove = \"\";\n  if(favouriteBusiness.map((business)=> business._id ).includes(id) )\n    addOrRemove = \"remove\";\n  else\n    addOrRemove = \"add\";\n\n  const body = {\n    query:\n    ` mutation{\n        addToFavourites(id: \"${id}\", addOrRemove: \"${addOrRemove}\") {  \n          _id\n          category{\n              title\n              _id\n              type\n          }    \n          name\n          rating{\n            fun,\n            crowd,\n            ratioInput,\n            difficultyGettingIn,\n            difficultyGettingDrink\n          }\n          name\n          totalUserCountRating\n          ageInterval\n          customBusiness\n          customData{\n            address\n            phoneNo\n            rating\n          }\n          location{\n            type\n            coordinates\n          }\n          uploadedPhotos{\n              secure_url\n          }\n          googleBusiness{\n            formatted_address\n            formatted_phone_number\n            name\n            place_id\n            user_ratings_total\n            rating\n            url\n            types,\n            opening_hours\n          }\n      }\n    }\n    `\n  }\n  \n  try{  \n    const res = await axios.post(`graphql?`,body,{ headers: {\n      'Authorization': `Bearer ${token}`\n    } });\n    dispatch({\n      type: getFavouritesBusiness,\n      payload: res.data.data.addToFavourites\n    })\n    return Promise.resolve(addOrRemove);\n  }catch(err){\n    console.log(\"the err\", err.response.data)\n  }\n\n}\n\nexport const selectSpecifcCategoryEstablishmentsAction  = (categoryId) => async(dispatch, getState) => {\n  dispatch({\n    type: selectSpecifcCategoryEstablishments,\n    payload: categoryId\n  })\n  setTimeout(()=>{\n    return Promise.resolve('ok');\n  }, 500)\n}\n\nexport const getFavouritesBusinessAction = () => async (dispatch, getState) => { \n  const { token } = await getUserData();\n  const body = {\n    query:\n    ` \n      query{\n        getFavouriteEstablishments \n          {  _id\n            category{\n              title\n              _id\n              type\n            }    \n            name\n            rating{\n              fun,\n              crowd,\n              ratioInput,\n              difficultyGettingIn,\n              difficultyGettingDrink\n            }\n            name\n            totalUserCountRating\n            ageInterval\n            customBusiness\n            customData{\n              address\n              phoneNo\n              rating\n            }\n            allRating{\n              creationAt\n              fun\n              crowd\n              ratioInput\n              difficultyGettingIn\n              difficultyGettingDrink\n            }\n            location{\n              type\n              coordinates\n            }\n            uploadedPhotos{\n              secure_url\n            }\n            googleBusiness{\n              formatted_address\n              formatted_phone_number\n              name\n              place_id\n              user_ratings_total\n              rating\n              url\n              types\n              opening_hours{\n                periods{\n                  close{\n                    day,\n                    time\n                  },\n                  open{\n                    day,\n                    time\n                  }\n                }\n              }\n            }\n          }\n        }\n\n      `\n  }\n  try{  \n    const res = await axios.post(`graphql?`,body,{ headers: {\n      'Authorization': `Bearer ${token}`\n    } });\n    dispatch({\n      type: getFavouritesBusiness,\n      payload: res.data.data.getFavouriteEstablishments\n    })\n  }catch(err){\n    console.log(\"the err in fvrites\", err.response)\n  }\n\n\n}\n\nexport const getSearchBusinesses = (searchValue) => async (dispatch, getState) => { \n    const body = {\n      query:\n      `query{\n        searchByUser(searchValue: \"${searchValue}\")\n         {   _id\n            placeId\n            category{\n                title\n                _id\n            }    \n            name\n            rating{\n              fun,\n              crowd,\n              ratioInput,\n              difficultyGettingIn,\n              difficultyGettingDrink\n            }\n            totalUserCountRating\n            ageInterval\n            customData{\n              address\n              phoneNo\n              rating\n            }\n            allRating{\n              creationAt\n              fun\n              crowd\n              ratioInput\n              difficultyGettingIn\n              difficultyGettingDrink\n            }\n            uploadedPhotos{\n              secure_url\n            }\n            location{\n              type\n              coordinates\n            }\n            googleBusiness{\n              formatted_address\n              formatted_phone_number\n              name\n              place_id\n              user_ratings_total\n              rating\n              url\n              types\n              opening_hours{\n                periods{\n                  close{\n                    day,\n                    time\n                  },\n                  open{\n                    day,\n                    time\n                  }\n                }\n              }\n            }        \n         }\n         }\n\n      `\n    }\n    try{  \n      const res = await axios.post(`graphql?`,body);\n      dispatch({\n        type: Search_Results,\n        payload: res.data.data.searchByUser,\n      })\n      return Promise.resolve(res.data.data.searchByUser);\n    }catch(err){\n      console.log(\"the err\", err.response.data)\n    }\n}\n\nexport const getNearLocationBusiness = ({ latitude, longitude }, updatedRadius) => async (dispatch, getState) => {\n  const { user } = getState();\n  let { radius } = user.user.user;\n  let finalRadius = updatedRadius ? updatedRadius : radius\n  const { token } = await getUserData();\n  \n  // latitude = 32.7970465;\n  // longitude = -117.254522;\n  // finalRadius = 100000;\n  console.log(\"the data\", latitude, longitude, finalRadius)\n\n  const body = {\n      query:`\n      query{\n        getNearByLocationBusiness(locationInput: { latitude: ${latitude.toFixed(5)}, longitude: ${longitude.toFixed(5)}, radius: ${finalRadius} }){\n        _id\n        placeId\n        category{\n            title\n            _id\n        }    \n        name\n        rating{\n          fun,\n          crowd,\n          ratioInput,\n          difficultyGettingIn,\n          difficultyGettingDrink,\n          creationAt\n        }\n        totalUserCountRating\n        ageInterval\n        customData{\n          address\n          phoneNo\n          rating\n        }\n        allRating{\n          creationAt\n          fun\n          crowd\n          ratioInput\n          difficultyGettingIn\n          difficultyGettingDrink\n        }\n        uploadedPhotos{\n          secure_url\n        }\n        location{\n          type\n          coordinates\n        }\n        googleBusiness{\n          formatted_address\n          formatted_phone_number\n          name\n          place_id\n          user_ratings_total\n          rating\n          url\n          types\n          opening_hours{\n            periods{\n              close{\n                day,\n                time\n              },\n              open{\n                day,\n                time\n              }\n            }\n          }\n        }\n        }}\n      `\n  }\n  try{  \n    const res = await axios.post(`graphql?`,body,{ headers: {\n      'Authorization': `Bearer ${token}`\n    } });\n    console.log(\"the data\",  res.data.data.getNearByLocationBusiness)\n    dispatch({\n      type: Near_Location_Business,\n      payload: res.data.data.getNearByLocationBusiness,\n    })\n    return Promise.resolve(res.data.data.getNearByLocationBusiness);\n  }catch(err){\n    console.log(\"hte errorsss\", err.response.data)\n  }\n};\n\nexport const getAdminSettings = () => async (dispatch, getState) => {\n  const getAdminData = await axios.get('/getdefaultSettings');\n  dispatch({\n    type: GET_ADMIN_SETTINGS,\n    payload: getAdminData.data.settings,\n  })\n}\n\nexport const getfilteredBusiness = ( selectedMainCategory, search, favourite) => async (dispatch, getState) => {\n\n  const { vibe, business, category, user } = getState();\n  const data = business.business.businesses;\n  const searchData = business.business.searchResults;\n  const favouriteEstablishments = business.business.favouriteBusiness;\n  const actualVibe = vibe.vibe.vibe;\n  const allCategories = category.category.category;\n  const favouriteEstablishmentCategory = business.business.selectedEstablishmentCategory\n  \n  let selectedCategory = []\n  if(!search){  \n    if(selectedMainCategory !== null)\n      selectedCategory = allCategories.filter((category)=> selectedMainCategory.includes(category._id)).map((specificCategory)=> specificCategory._id)\n    else{\n      selectedCategory = allCategories.filter((category)=> actualVibe.selectedCategories.includes(category._id)).map((specificCategory)=> specificCategory._id)\n    }\n  }\n  try{ \n    let filterCategoryBusinessVibe; \n    if(search)\n      filterCategoryBusinessVibe = getSearchData(actualVibe, searchData, business.business.adminSettings)\n    else if(favourite){\n      let favouriteBusiness = favouriteEstablishments.filter((business)=> {\n        return business.category.map(category=> category._id).includes(favouriteEstablishmentCategory)\n      })\n      filterCategoryBusinessVibe = getSearchData(actualVibe , favouriteBusiness, business.business.adminSettings)\n    }\n    else\n      filterCategoryBusinessVibe = getAllCaseData(actualVibe , data, selectedCategory, business.business.adminSettings)\n    const { allSpots } = filterCategoryBusinessVibe;\n    let { latitude, longitude } = user.user.location;\n    \n    // For User Testing\n    // latitude = 32.7970465;\n    // longitude = -117.254522;\n    \n    var userLocation = { lat: latitude , lng: longitude }\n    var destinationLocation = {};\n    const markerList = allSpots.map((marker)=>{\n      destinationLocation = { lat: marker.latitude , lng: marker.longitude }\n      return {...marker, distanceAway:  getMiles(haversine(userLocation, destinationLocation)).toFixed(2)}\n    })\n  \n    filterCategoryBusinessVibe.allSpots = sortSpotsByDistanceAway(markerList)\n    filterCategoryBusinessVibe.isFavorite = favourite ? true : false\n    dispatch({\n      type: FILTERED_BUSINESS,\n      payload: filterCategoryBusinessVibe,\n    })\n  \n  }catch(err){\n    console.log(\"hte errorsss\", err)\n  }\n};\n\nexport const emptyBusiness = () => async (dispatch, getState) => {\n  dispatch({\n    type: Empty_Business,\n    payload: null,\n  })\n  setTimeout(()=>{\n    return Promise.resolve('ok');\n  }, 2000) \n}\n\nexport const addRating = (data) => async (dispatch, getState) => {\n  dispatch({\n    type: ADD_Rating,\n    payload: data,\n  })\n}\n\nexport const updateSpecificBusinessRating = (data) => async (dispatch, getState) => {\n  dispatch({\n    type: Update_Rating,\n    payload: data,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}